# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
if ARGV[0] != 'plugin'
  
  required_plugins = ['vagrant-hostmanager', 'vagrant-reload', 'vagrant-cachier', 'vagrant-faster'
  ]
  plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
  if not plugins_to_install.empty?
    puts "Installing plugins: #{plugins_to_install.join(' ')}"
      if system "vagrant plugin install #{plugins_to_install.join(' ')}"
        exec "vagrant #{ARGV.join(' ')}"
      else
        abort "Installation of one or more plugins has failed. Aborting."
      end

  end
end

#if Vagrant::Util::Platform.windows?
#  unless Vagrant.has_plugin?("vagrant-winnfsd")
#    puts 'Installing vagrant-winnfsd Plugin...'
#    system "vagrant plugin install vagrant-winnfsd"
#  end
#end

Vagrant.configure("2") do |config|

  #unless Vagrant.has_plugin?("vagrant-disksize")
  #  puts 'Installing vagrant-disksize Plugin...'
  #  system('vagrant plugin install vagrant-disksize')
  #end
 
  #unless Vagrant.has_plugin?("vagrant-vbguest")
  #  puts 'Installing vagrant-vbguest Plugin...'
  #  system('vagrant plugin install vagrant-vbguest')
  #end
 
  #unless Vagrant.has_plugin?("vagrant-reload")
  #  puts 'Installing vagrant-reload Plugin...'
  #  system('vagrant plugin install vagrant-reload')
  #end
  
  #unless Vagrant.has_plugin?("vagrant-hostmanager")
  #  puts 'Installing vagrant-hostmanager Plugin...'
  #  system('vagrant plugin install vagrant-hostmanager')
  #end

  #unless Vagrant.has_plugin?("vagrant-cachier")
  #  puts 'Installing vagrant-cachier Plugin...'
  #  system('vagrant plugin install vagrant-cachier')
  #end

  #if Vagrant.has_plugin?("vagrant-vbguest")
  #  config.vbguest.auto_update = true
  #end

#  if Vagrant.has_plugin?("vagrant-cachier")

#    config.cache.scope = :machine # or :box
#    config.cache.auto_detect = true
#    config.cache.enable :apt
#    config.cache.enable :gem
#    config.cache.synced_folder_opts = {

#      type: :nfs,

#      mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
#    }

#  end

  #config.vm.provision "shell", :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"
#  config.vm.synced_folder ".", "/tmp", type: "nfs"
  config.vm.boot_timeout = 1800

  if Vagrant.has_plugin?("vagrant-hostmanager")
     config.hostmanager.enabled = true
     config.hostmanager.manage_host = true
     config.hostmanager.ignore_private_ip = false
     config.hostmanager.include_offline = true
  end

  config.vm.define :DB_VM do |db| 
       db.vm.box = "ubuntu/focal64"
       db.vm.hostname = "db"
       db.vm.network :private_network, ip: "192.168.33.10" 
       db.vm.network "forwarded_port", guest: 3306, host: 8081
       db.vm.provider "virtualbox" do |vb|
          vb.name = "DB_VM"
          #vb.gui = true
          vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
          vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
          vb.customize ["modifyvm", :id, "--ioapic", "on"]
          vb.memory = "3072"
          vb.cpus = "3"
       end 
       # db.vm.provision :shell, path: "bootstrap-mgmt.sh" 
  end 

  config.vm.define :APP_VM do |app| 
        app.vm.box = "ubuntu/focal64" 
        app.vm.hostname = "app" 
        app.vm.provision "shell", inline: "echo 'app' > /home/vagrant/index.html; chown vagrant:vagrant /home/vagrant/index.html"
        app.vm.network :private_network, ip: "192.168.33.11" 
        app.vm.network "forwarded_port", guest: 80, host: 8082,
        auto_correct: true 
        app.vm.usable_port_range = 8000..8999
        app.vm.provider "virtualbox" do |vb|
            vb.name = "APP_VM"
            vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
            vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
            vb.customize ["modifyvm", :id, "--ioapic", "on"]
            vb.memory = "3072"
            vb.cpus = "3"
        end 
  end
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "ubuntu/focal64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end